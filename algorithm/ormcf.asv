function [X_recov,S,O_] = ormcf(M_0,X,Omega,rank,iter,lambda_2,lambda_3,lambda_4,lambda_5)
% Noisy 边信息
% lambda_3: U_M，V_M的正则项
% lambda_4: U_N，V_N的正则项
% lambda_5: D_M的正则项
dim_ = size(M_0);
d = size(X,2);
A_M = zeros([rank,rank]);
B_M = zeros([dim_(1),rank]);
D_M = randn([dim_(1),rank]);
D_M_old = randn([dim_(1),rank]);
R_M = zeros([rank,dim_(2)]);
r_M = zeros([rank,1]);
S = zeros(dim_);
O_ = zeros(dim_);
flag = 0;
tol = 1e-7;
for i = 1: iter
    %fprintf("iter:%d\n",i);
    for n = 1: dim_(2)
        m = M_0(:,n,:,:);
        %更新右张量R和噪声张量S
        omega_ = Omega(:,n,:,:);
        [s,r_M,r_N,O] = R_update(m,omega_,D_M,r_M,rank,lambda_2,lambda_3,lambda_4);
        O_(:,n) = O;
        S(:,n) = s;
        R_M(:,n) = r_M;
        ln = L_N * r_N;
        %更新左张量L2
        A_M = A_M + r_M * r_M';
        B_M = B_M + (m-s-O-ln) * r_M';
        L_M = L_update(D_M,X,lambda_3,lambda_5);
        D_M = D_update(D_M,A_M,B_M,X,L_M,lambda_5);
        diff = norm(D_M_old(:)-D_M(:));
        %fprintf("diff_L:%f\n",diff);
        D_M_old = D_M;
    end
end
X_recov = D_M * R_M;
%X_recov = X * L_M * R_M + L_N * R_N;

    function [s_,r_,r_N,O] = R_update(m_,Omega_,D_,r_,rank_,lambda_1,lambda_2)
    d_ = size(m_);
    D_1 = D_' * D_ + lambda_1* eye([rank_,rank_]);
    D_1_inv = tinv(D_1);
    D_2 = tran(D_);
    D_tilde = D_1_inv * D_2;
    s_ = zeros(d_);
    s_new = s_;
    r_new = r_;
    O = zeros(d_);
    converged = false;
    iter_ = 0;
    while ~converged
        iter_ = iter_ +1;
        s_ = soft_threshold(m_- O - D_ *r_,lambda_2);
        r_ = D_tilde * (m_- s_ - O);
        O = m_ - s_ - D_ * r_;
        O = O .* (1-Omega_);
        error = max([norm(s_(:)-s_new(:),"fro"),norm(r_(:)-r_new(:),"fro")]);
        %fprintf("error:%d\n",error);
        if error < tol
            converged = true;
        end
        if ~converged && iter_ >= 1000
            converged = true ;    
        end
        s_new = s_;
        r_new = r_;
    end 
end

    function [L_] = L_update(D_,X,lambda_3,lambda_5)
    X_1 = tran(X) * X;
    d_ = size(X_1);
    X_2 = inv((lambda_3/lambda_5)* eye(d_)+X_1);
    X_3 = X' * D_;
    L_ = X_2 * X_3;         
end

    function [D_] = D_update(D_,A_,B_,X,L_,lambda_5)
    d_ = size(B_);
    M_ = X * L_;
    A_ = A_ + lambda_5 * eye(size(A_));
    B_ = B_ + lambda_5 * M_;
    for j = 1:d_(2)
            D_(:,j) = D_(:,j) + (B_(:,j) - D_(:,:) * A_(:,j))/A_(j,j);
    end
    end


end